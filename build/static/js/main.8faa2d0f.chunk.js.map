{"version":3,"sources":["components/Board/Cell/Cell.module.css","components/Board/Board.module.css","App.module.css","components/Score/Score.module.css","components/Timer/Timer.module.css","components/ResetControl/ResetControl.module.css","components/Board/Cell/Cell.js","components/Board/Board.js","components/Score/Score.js","components/Timer/Timer.js","components/ResetControl/ResetControl.js","containers/Game/Game.js","hoc/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","cell","props","cellStatusClass","classes","Covered","status","Uncovered","Exploded","Flagged","Revealed","False_Matched","className","Cell","join","onClick","clicked","onContextMenu","rightClicked","neighbors","board","boardClass","Board","gameOver","GameOver","gameCompleted","GameCompleted","cells","map","el","index","key","mined","cellClicked","event","cellRightClicked","score","Score","minesCounter","Timer","state","elapsedSeconds","isRunning","this","slice","Math","floor","timer","setInterval","setState","clearInterval","prevProps","timerOn","stopTimer","startTimer","getMinutes","getSeconds","Component","resetControl","ResetControl","BOARD_SIZE","small","lines","columns","mines","medium","large","Game","boardSize","flaggedMines","cellClickedHandler","newCells","filter","forEach","showGameOver","uncoverEmptyCell","length","cellRightClickedHandler","preventDefault","cellStatus","every","resetControlClickedHandler","gameReset","boardCellsCount","i","push","random","currentCell","bombs","layout","app","App","Layout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8faa2d0f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cell\":\"Cell_Cell__14wlN\",\"Covered\":\"Cell_Covered__39I-w\",\"Uncovered\":\"Cell_Uncovered__3lp1p\",\"Exploded\":\"Cell_Exploded__2vZ-N\",\"Flagged\":\"Cell_Flagged__3FCeF\",\"Revealed\":\"Cell_Revealed__3E-T5\",\"False_Matched\":\"Cell_False_Matched__2qo0A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2Vm6-\",\"GameCompleted\":\"Board_GameCompleted__2-XiC\",\"GameOver\":\"Board_GameOver__3cefu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Score\":\"Score_Score__1n6On\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Timer\":\"Timer_Timer__3ti8X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResetControl\":\"ResetControl_ResetControl__3ZCt_\"};","import React from 'react';\nimport classes from './Cell.module.css';\n\nconst cell = (props) => {\n    let cellStatusClass = classes.Covered;\n    switch(props.status) {\n        case 0:\n            cellStatusClass = classes.Covered;\n            break;\n        case 1:\n            cellStatusClass = classes.Uncovered;\n            break;\n        case 2:\n            cellStatusClass = classes.Exploded;\n            break;\n        case 3:\n            cellStatusClass = classes.Flagged;\n            break;\n        case 4:\n            cellStatusClass = classes.Revealed;\n            break;    \n        case 5:\n            cellStatusClass = classes.False_Matched;\n            break;    \n        default:\n            cellStatusClass = classes.Covered;\n    }\n      \n    return (\n        <div className={[classes.Cell, cellStatusClass].join(' ')}\n            onClick={props.clicked}\n            onContextMenu={props.rightClicked}>\n            {props.status === 1  && props.neighbors > 0 ? props.neighbors : '.'}\n        </div>\n    )\n}\n\nexport default cell;","import React from 'react';\nimport classes from './Board.module.css';\nimport Cell from './Cell/Cell';\n\nconst board = (props) => {\n    let boardClass = classes.Board;\n    if(props.gameOver) boardClass = classes.GameOver;\n    if(props.gameCompleted) boardClass = classes.GameCompleted;\n\n    return (\n        <div className={boardClass}>\n        {props.cells.map((el, index) => (\n            <Cell key={index}\n                status={el.status}\n                mined={el.mined}\n                neighbors={el.neighbors}\n                clicked={() => props.cellClicked(index)}\n                rightClicked={(event) => props.cellRightClicked(event, index)} />\n        ))}\n        </div>\n    )\n};\n\nexport default board;","import React from 'react';\nimport classes from './Score.module.css'\n\nconst score = (props) => (\n\n    <div className={classes.Score}>{props.minesCounter}</div>\n\n)\n\nexport default score;","import React, { Component } from 'react';\nimport classes from './Timer.module.css';\n\nclass Timer extends Component {\n  state = {\n    elapsedSeconds: 0,\n    isRunning: false\n  }\n\n  getSeconds() {\n    return ('0'+this.state.elapsedSeconds % 60).slice(-2)\n  }\n\n  getMinutes() {\n    return (Math.floor(this.state.elapsedSeconds / 60))\n  }\n\n  startTimer() {\n    this.timer = setInterval(() => {\n      this.setState({elapsedSeconds: (this.state.elapsedSeconds + 1)})}, 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer)\n  }\n\n  componentDidUpdate(prevProps){\n    if(this.props.timerOn !== prevProps.timerOn)\n      if(!this.state.isRunning){\n        this.startTimer();\n        this.setState({elapsedSeconds:0, isRunning: true})\n      } else {\n        this.stopTimer();\n        this.setState({isRunning: false})\n      }\n  }\n\n  render() {\n\n    return (\n    <div className={classes.Timer}>\n          {this.getMinutes()}:{this.getSeconds()}\n      </div>\n    )\n  }\n}\nexport default Timer;","import React from 'react';\nimport classes from './ResetControl.module.css'\n\nconst resetControl = (props) => (\n    <button className={classes.ResetControl} onClick={props.clicked}>Reset</button>\n)\n\nexport default resetControl","import React, { Component } from 'react';\nimport Board from '../../components/Board/Board';\nimport Score from '../../components/Score/Score';\nimport Timer from '../../components/Timer/Timer';\nimport ResetControl from '../../components/ResetControl/ResetControl';\n\nconst BOARD_SIZE = {\n    small:  {lines: 10, columns:10, mines: 15},\n    medium: {lines: 20, columns:20, mines: 44},\n    large:  {lines: 30, columns:20, mines: 66}\n    },\n    COVERED = 0, UNCOVERED = 1, EXPLODED = 2, FLAGGED = 3, REVEALED = 4, FALSE_MATCHED = 5;\n\nclass Game extends Component {\n\n    state = {\n        cells: [],\n        boardSize: BOARD_SIZE.small,\n        gameOver: false,\n        gameCompleted: false,\n        flaggedMines: 0,\n        timerOn: false\n    }\n\n    gameReset() {\n        //create & reset the board\n        const newCells = [],\n            lines = this.state.boardSize.lines,\n            columns = this.state.boardSize.columns;\n\n        const boardCellsCount = lines * columns;\n        for (let i=1; i<=boardCellsCount; i++){\n            const status = COVERED;\n            newCells.push({status: status, mined: false, neighbors:0});\n        }\n\n        // fill in the board using the bombs random generator\n        for (let i=1; i<=this.state.boardSize.mines; i++){\n            let index = 0;\n            do { \n                index = Math.floor(Math.random()*boardCellsCount);\n            } while (newCells[index].mined)\n            newCells[index].mined = true\n        }\n\n        // compute the neighbors\n        newCells.forEach((currentCell, index) => {\n            let bombs = 0;\n            if(index-columns-1 >= 0 && (index-columns-1) % columns !== columns-1)\n                {if(newCells[index-columns-1].mined) { bombs++ }};\n            if(index-columns   >= 0) {if(newCells[index-columns].mined) { bombs++ }};\n            if(index-columns+1 >= 0 && (index-columns+1) % columns !== 0)\n                {if(newCells[index-columns+1].mined) { bombs++ }};\n            if(index-1 >= 0 && (index-1) % columns !== columns-1)\n                {if(newCells[index-1].mined) { bombs++ }};\n            if(index+1 <= boardCellsCount-1 && (index+1) % columns !== 0)\n                {if(newCells[index+1].mined) { bombs++ }};\n            if(index+columns-1 <= boardCellsCount-1 && (index+columns-1) % columns !== columns-1)\n                {if(newCells[index+columns-1].mined) { bombs++ }};\n            if(index+columns   <= boardCellsCount-1) {if(newCells[index+columns].mined) { bombs++ }};\n            if(index+columns+1 <= boardCellsCount-1 && (index+columns+1) % columns !== 0)\n                {if(newCells[index+columns+1].mined) { bombs++ }};\n            currentCell.neighbors = bombs;\n        })\n        this.setState({cells: newCells,\n            gameOver: false,\n            gameCompleted: false,\n            flaggedMines: 0,\n            timerOn: false});\n    }\n\n    componentDidMount () {\n        // create the board storage\n        this.gameReset()\n    }\n\n    // componentDidUpdate() {\n    //     if(this.state.gameOver) console.log(\"You've got corona-19 infection and will be quarantined for the next 14 days!\");\n    //     if(this.state.gameCompleted) console.log('Game completed!');\n    // }\n\n    cellClickedHandler = (index) => {\n//-----------\n        function uncoverEmptyCell(newCells, index, columns) {\n            \n            //nothing to do if the cell is already un-covered\n            if(newCells[index].status !== COVERED) return;\n\n            //un-cover the cell\n            newCells[index].status = UNCOVERED;\n \n            //top-left\n            if(index-columns-1 >= 0 && (index-columns-1) % columns !== columns-1 ) {\n                if(newCells[index-columns-1].neighbors === 0) {\n                    uncoverEmptyCell(newCells, index-columns-1, columns)\n                } else if(!newCells[index-columns-1].mined) newCells[index-columns-1].status = UNCOVERED\n            }\n            //top-middle\n            if(index-columns >= 0) {\n                if(newCells[index-columns].neighbors === 0) {\n                    uncoverEmptyCell(newCells, index-columns, columns)\n                } else if(!newCells[index-columns].mined) newCells[index-columns].status = UNCOVERED\n            }\n            //top-right\n            if(index-columns+1 >= 0 && (index-columns+1) % columns !== 0) {\n                if(newCells[index-columns+1].neighbors === 0) {\n                    uncoverEmptyCell(newCells, index-columns+1, columns)\n                } else if(!newCells[index-columns+1].mined) newCells[index-columns+1].status = UNCOVERED\n            }\n            //left\n             if(index-1 >= 0 && (index-1) % columns !== columns-1) {\n                if(newCells[index-1].neighbors === 0) {\n                    uncoverEmptyCell(newCells, index-1, columns)\n                } else if(!newCells[index-1].mined) newCells[index-1].status = UNCOVERED\n            } \n            //right\n            if(index+1 <= newCells.length-1 && (index+1) % columns !== 0) {\n                if(newCells[index+1].neighbors === 0) {\n                    uncoverEmptyCell(newCells, index+1, columns)\n                } else if(!newCells[index+1].mined) newCells[index+1].status = UNCOVERED\n            }\n            //bottom-left\n             if(index+columns-1 <= newCells.length-1 && (index+columns-1) % columns !== columns-1) {\n                if(newCells[index+columns-1].neighbors === 0) {\n                    uncoverEmptyCell(newCells, index+columns-1, columns)\n                } else if(!newCells[index+columns-1].mined) newCells[index+columns-1].status = UNCOVERED\n            }\n            //bottom-middle\n            if(index+columns <= newCells.length-1) {\n                if(newCells[index+columns].neighbors === 0) {\n                    uncoverEmptyCell(newCells, index+columns, columns)\n                } else if(!newCells[index+columns].mined) newCells[index+columns].status = UNCOVERED\n            }\n            //bottom-right\n            if(index+columns+1 <= newCells.length-1 && (index+columns+1) % columns !== 0) {\n                if(newCells[index+columns+1].neighbors === 0) {\n                    uncoverEmptyCell(newCells, index+columns+1, columns)\n                } else if(!newCells[index+columns+1].mined) newCells[index+columns+1].status = UNCOVERED\n            } \n        }\n//-----------\n        function showGameOver(newCells, index){\n            newCells[index].status = EXPLODED;\n            const suspectedCells = newCells.filter(cell => \n                (cell.mined ^ cell.status === FLAGGED) && cell.status !== EXPLODED);\n            suspectedCells.forEach(cell => \n                cell.status === FLAGGED ? cell.status = FALSE_MATCHED : cell.status = REVEALED)           \n        }\n//\n        if(!this.state.gameCompleted && !this.state.gameOver) {\n            const newCells = [...this.state.cells],\n                columns = this.state.boardSize.columns;\n    \n            let gameOver = false;    \n            //exit if cell is flagged\n            if(newCells[index].status === FLAGGED) return; \n            if(newCells[index].mined) {\n                //game failed\n                gameOver = true;\n                showGameOver(newCells, index);\n            } else {\n                //if empty then un-cover it along with all its empty close neighbors\n                    if(newCells[index].neighbors === 0) {\n                            uncoverEmptyCell(newCells, index, columns)\n                    } else  newCells[index].status = UNCOVERED\n            }\n            this.setState({cells: newCells, gameOver: gameOver, timerOn: !gameOver});\n        }      \n    }\n\n    cellRightClickedHandler = (event, index) => {\n\n        event.preventDefault();\n        if(!this.state.gameCompleted && !this.state.gameOver) {\n    \n            const newCells = [...this.state.cells]\n               // cell = newCells[index]; \n            let cellStatus = newCells[index].status,\n                flaggedMines = this.state.flaggedMines,\n                gameCompleted = this.state.gameCompleted;\n\n            //exit if right-click is not allowed for this cell\n            if(cellStatus === UNCOVERED || cellStatus === EXPLODED) return;\n            \n            //toggle flagging the cell\n            if(cellStatus === FLAGGED) {\n                cellStatus = COVERED;\n                flaggedMines--\n            } else if(cellStatus === COVERED) {\n                cellStatus = FLAGGED;\n                flaggedMines++\n                }\n\n            //update the state\n            newCells[index].status = cellStatus;\n\n            //check if the game is completed\n            gameCompleted = newCells.every(cell => cell.mined === (cell.status === FLAGGED));\n            \n            this.setState({ cells: newCells,\n                            flaggedMines: flaggedMines,\n                            gameCompleted: gameCompleted,\n                            timerOn: !gameCompleted})\n            }\n        }\n\n    resetControlClickedHandler = () => {\n        this.gameReset()\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Board\n                    cells={this.state.cells}\n                    cellClicked={this.cellClickedHandler}\n                    cellRightClicked={this.cellRightClickedHandler}\n                    gameOver={this.state.gameOver}\n                    gameCompleted={this.state.gameCompleted}/>\n                <Score minesCounter={this.state.boardSize.mines - this.state.flaggedMines} />\n                <ResetControl clicked={this.resetControlClickedHandler} />\n                <Timer timerOn={this.state.timerOn} />\n            </div> \n        )\n    }\n};\n\nexport default Game;\n","import React from 'react';\nimport Game from '../../containers/Game/Game';\n\nconst layout = () => (\n    <div>\n        <p>Coroana Sweeper</p>\n        <Game />\n    </div>\n)\n\nexport default layout;","import React from 'react';\nimport classes from './App.module.css';\nimport Layout from './hoc/Layout/Layout';\n\nconst app = () => (\n    <div className={classes.App}>\n      <Layout />\n    </div>\n)\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}